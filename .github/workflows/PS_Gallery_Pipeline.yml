# This is a basic workflow to help you get started with Actions

name: PSGallery Publish

# Controls when the action will run.
on: # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  #pull_request:
    #branches: [ master ]

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #Run pwsh functions to publish the module
      - uses: actions/checkout@v2
      - name: Publish updated Modules
        env:
          NUGET_KEY: ${{ secrets.PS_GALLERY_KEY }}
        shell: pwsh
        run: |
          $workingdirectory = (get-location).path

          function Invoke-PublishModules {
            $ErrorActionPreference = 'Stop'

            #AdminToolbox
            $AdminToolboxPSGallery = (Find-Module AdminToolbox -Repository PSGallery).version
            $AdminToolboxGithub = Get-Content "$workingdirectory/AdminToolbox/ChangeLog.md" | Select-Object -Last 1
              if ($AdminToolboxGithub -gt $AdminToolboxPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #ActiveDirectory
            $ActiveDirectoryPSGallery = (Find-Module "AdminToolbox.ActiveDirectory" -Repository PSGallery).version
            $ActiveDirectoryGithub = Get-Content "$workingdirectory/Admintoolbox.ActiveDirectory/ChangeLog.md" | Select-Object -Last 1
              if ($ActiveDirectoryGithub -gt $ActiveDirectoryPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.ActiveDirectory" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #EndpointManagement
            $EndpointManagementPSGallery = (Find-Module "AdminToolbox.EndpointManagement" -Repository PSGallery).version
            $EndpointManagementGithub = Get-Content "$workingdirectory/Admintoolbox.EndpointManagement/ChangeLog.md" | Select-Object -Last 1
              if ($EndpointManagementGithub -gt $EndpointManagementPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.EndpointManagement" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #Exchange
            $ExchangePSGallery = (Find-Module "AdminToolbox.Exchange" -Repository PSGallery).version
            $ExchangeGithub = Get-Content "$workingdirectory/Admintoolbox.Exchange/ChangeLog.md" | Select-Object -Last 1
              if ($ExchangeGithub -gt $ExchangePSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.Exchange" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #FFTools
            $FFToolsPSGallery = (Find-Module "AdminToolbox.FFTools" -Repository PSGallery).version
            $FFToolsGithub = Get-Content "$workingdirectory/Admintoolbox.FFTools/ChangeLog.md" | Select-Object -Last 1
              if ($FFToolsGithub -gt $FFToolsPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.FFTools" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #FileManagement
            $FileManagementPSGallery = (Find-Module "AdminToolbox.FileManagement" -Repository PSGallery).version
            $FileManagementGithub = Get-Content "$workingdirectory/Admintoolbox.FileManagement/ChangeLog.md" | Select-Object -Last 1
              if ($FileManagementGithub -gt $FileManagementPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.FileManagement" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #Fun
            $FunPSGallery = (Find-Module "AdminToolbox.Fun" -Repository PSGallery).version
            $FunGithub = Get-Content "$workingdirectory/Admintoolbox.Fun/ChangeLog.md" | Select-Object -Last 1
              if ($FunGithub -gt $FunPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.Fun" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #Networking
            $NetworkingPSGallery = (Find-Module "AdminToolbox.Networking" -Repository PSGallery).version
            $NetworkingGithub = Get-Content "$workingdirectory/Admintoolbox.Networking/ChangeLog.md" | Select-Object -Last 1
              if ($NetworkingGithub -gt $NetworkingPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.Networking" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #Remoting
            $RemotingPSGallery = (Find-Module "AdminToolbox.Remoting" -Repository PSGallery).version
            $RemotingGithub = Get-Content "$workingdirectory/Admintoolbox.Remoting/ChangeLog.md" | Select-Object -Last 1
              if ($RemotingGithub -gt $RemotingPSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.Remoting" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            #VMWareAutomate
            $VMWareAutomatePSGallery = (Find-Module "AdminToolbox.VMWareAutomate" -Repository PSGallery).version
            $VMWareAutomateGithub = Get-Content "$workingdirectory/Admintoolbox.VMWareAutomate/ChangeLog.md" | Select-Object -Last 1
              if ($VMWareAutomateGithub -gt $VMWareAutomatePSGallery ) {
                Publish-Module -Path "$workingdirectory/AdminToolbox.VMWareAutomate" -NuGetApiKey $env:NUGET_KEY -Verbose
              }

            $ErrorActionPreference = 'continue'

          }
          Invoke-PublishModules




      #THIS IS FOR WORKFLOW TESTING. IT USES THE PTEST MODULE AT /PTEST/PTEST.PSD1
      #- uses: actions/check     out@v2
      #- name: Publish updated Modules
        #env:
          #NUGET_KEY: ${{ secrets.PS_GALLERY_KEY }}
        #shell: pwsh
        #run: |
          #$workingdirectory = (get-location).path
          #function Invoke-PublishModules {
            #$ptestversionPSGallery = (Find-Module ptest -Repository PSGallery).version
            #$ptestversionGithub = Get-Content "$workingdirectory/PTest/Changelog.md" | Select-Object -Last 1
              #if ($ptestversionGithub -gt $ptestversionPSGallery ) {
                #Publish-Module -Path $workingdirectory/PTest -NuGetApiKey $env:NUGET_KEY -Verbose
              #}
          #}
          #Invoke-PublishModules