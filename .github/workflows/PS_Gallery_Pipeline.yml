# This is a basic workflow to help you get started with Actions

name: PSGal;l

# Controls when the action will run.
on: # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  #pull_request:
    #branches: [ master ]

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      #Run pwsh functions to publish the module
        - name: Publish the Module
          shell: pwsh
          run: |
            get-childitem

      # Set Required Modules that will be needed and should be cached prior to running more steps
        #- name: Set required Powershell modules
          #id: psmodulecache
          #uses: potatoqualitee/psmodulecache@v1
          #with:
            #modules-to-cache: Pester, PSSCriptAnalyzer, InvokeBuild, platyPS

      # Cache the Modules
        #- name: Setup PowerShell module cache
          #id: cacher
          #uses: actions/cache@v2
          #with:
            #path: ${{ steps.psmodulecache.outputs.modulepath }}
            #key: ${{ steps.psmodulecache.outputs.keygen }}

      #Installing any missing modules
        #- name: Install required PowerShell modules
          #if: steps.cacher.outputs.cache-hit != 'true'
          #shell: pwsh
          #run: |
            #Set-PSRepository PSGallery -InstallationPolicy Trusted
            #Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop