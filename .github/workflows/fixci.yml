# This workflow publishes new modules to PSGallery on pull requests that close on the master branch.

name: fix ci testing

# Controls when the action will run.
on: # Triggers the workflow on push or pull request events but only for the master branch
    #push:
    #branches: [ master ]
    pull_request:
        branches:
            - master
        types:
            - closed

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    build:
        # The type of runner that the job will run on
        runs-on: windows-2019

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - uses: actions/checkout@v3

            #Cache Modules that are required by publishing modules
            - name: Specify PowerShell modules to cache
              id: psmodulecache
              uses: potatoqualitee/psmodulecache@v5.1
              with:
                  modules-to-cache: ImportExcel, Posh-SSH, PSEventViewer, PSNmap, VMware.Vim, VMware.VimAutomation.Cis.Core, VMware.VimAutomation.Common, VMware.VimAutomation.Core, VMware.VimAutomation.Sdk

            #Run pwsh functions to publish the module
            - name: Install Required Modules, Update Manifests, Publish updated Modules, and commit manifest changes
              env:
                  NUGET_KEY: ${{ secrets.PS_GALLERY_KEY }}
                  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
              shell: pwsh
              run: |
                  # Attempt to resolve future nuget issues observed on 2023/03/15
                  Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile "$env:LOCALAPPDATA\Microsoft\Windows\PowerShell\PowerShellGet\NuGet.exe"
                  Install-module powershellget -force -Allowclobber
                  Import-Module powershellget

                  #Impoort Modules
                  Get-Module ImportExcel, Posh-SSH, PSEventViewer, PSNmap, VMware.Vim, VMware.VimAutomation.Cis.Core, VMware.VimAutomation.Common, VMware.VimAutomation.Core, VMware.VimAutomation.Sdk | Import-Module

                  #Set-PSRepository PSGallery -InstallationPolicy Trusted
                  #Install-Module PSEventViewer -Force -Allowclobber
                  #Install-Module Posh-SSH -Force -Allowclobber -AllowPrerelease
                  #Install-Module -Name VMware.VimAutomation.Core -Force

                  #Import and Run Scripts
                  #This is used by a workflow to generate manifest files. Only needs to be updated manually when exported functions or other static variables need changing. Otherwise can be left as is.

                  Function New-Manifest {
                      #Must Be run each time a new module version is created.
                      #Version folder name must be the same as the moduleversion parameter
                      [CmdletBinding(SupportsShouldProcess)]
                      param (
                          [Parameter(Mandatory = $false)][Switch]$AdminToolbox,
                          [Parameter(Mandatory = $false)][Switch]$ActiveDirectory,
                          [Parameter(Mandatory = $false)][Switch]$EndpointManagement,
                          [Parameter(Mandatory = $false)][Switch]$Exchange,
                          [Parameter(Mandatory = $false)][Switch]$FFTools,
                          [Parameter(Mandatory = $false)][Switch]$FileManagement,
                          [Parameter(Mandatory = $false)][Switch]$FortiWizard,
                          [Parameter(Mandatory = $false)][Switch]$Fun,
                          [Parameter(Mandatory = $false)][Switch]$Networking,
                          [Parameter(Mandatory = $false)][Switch]$MSGraph,
                          [Parameter(Mandatory = $false)][Switch]$Office365,
                          [Parameter(Mandatory = $false)][Switch]$Remoting,
                          [Parameter(Mandatory = $false)][Switch]$VMWareAutomate
                      )

                      $workingdirectory = (Get-Location).path

                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.ActiveDirectory/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:ActiveDirectoryGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.EndpointManagement/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:EndpointManagementGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Exchange/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:ExchangeGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.FFTools/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:FFToolsGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.FileManagement/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:FileManagementGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Fun/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:FunGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.MSGraph/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:MSGraphGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Networking/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:NetworkingGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Office365/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:Office365GithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Remoting/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:RemotingGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.VMWareAutomate/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:VMWareAutomateGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/Admintoolbox.FortiWizard/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:FortiWizardGithubVersion = $step3 | Select-Object -First 1
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $script:AdminToolboxGithubVersion = $step3 | Select-Object -First 1

                      if ($AdminToolbox) {
                          ##Create Manifests
                          #AdminToolbox
                          $savepath = "$workingdirectory\modules\AdminToolbox"
                          #Old iconurl. Maybe bad now if profile image has changed. 'https://avatars2.githubusercontent.com/u/53202926?s=460&v=4'
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-All', 'Get-Info', 'Get-Full', 'Start-Application', 'Get-ModuleAliases', 'Invoke-Show'
                              Path                 = "$savepath\AdminToolbox.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Master module for a collection of modules. These modules are varied in their tasks. The overall purpose of them being to provide a powerfull Toolset to improve IT Admin workflows."
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:AdminToolboxGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox'
                              RequiredModules      = (
                                  @{ModuleName = 'AdminToolbox.ActiveDirectory'; ModuleVersion = $script:ActiveDirectoryGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.EndpointManagement'; ModuleVersion = $script:EndpointManagementGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.Exchange'; ModuleVersion = $script:ExchangeGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.FFTools'; ModuleVersion = $script:FFToolsGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.FileManagement'; ModuleVersion = $script:FileManagementGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.FortiWizard'; ModuleVersion = $script:FortiWizardGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.Fun'; ModuleVersion = $script:FunGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.Networking'; ModuleVersion = $script:NetworkingGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.MSGraph'; ModuleVersion = $script:MSGraphGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.Office365'; ModuleVersion = $script:Office365GithubVersion; },
                                  @{ModuleName = 'AdminToolbox.Remoting'; ModuleVersion = $script:RemotingGithubVersion; },
                                  @{ModuleName = 'AdminToolbox.VMWareAutomate'; ModuleVersion = $script:VMWareAutomateGithubVersion; },
                                  @{ModuleName = 'ImportExcel'; ModuleVersion = '7.0.1'; },
                                  @{ModuleName = 'posh-ssh'; ModuleVersion = '2.3.0' },
                                  @{ModuleName = 'PSEventViewer'; ModuleVersion = '1.0.17'; }
                              )
                              RootModule           = "AdminToolboxManifest.psm1"
                              ReleaseNotes         = "The release notes can be found in the ChangeLog.md file at the scriptroot path."
                              Tags                 = '365', 'Active', 'ActiveDirectory', 'Automate', 'Application', 'Crescendo', 'Directory', 'Exchange', 'FileManagement', 'Fortinet', 'FortiGate', 'FortiOS', 'GraphAPI', 'Iperf', 'MSGraph', 'Network', 'Networking', 'NetworkScan', 'Office', 'Office365', 'OpenSSH', 'PC', 'PCSetup', 'Print', 'Printer', 'Remoting', 'Robocopy', 'Setup', 'SSH', 'vmware', 'Windows'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($ActiveDirectory) {
                          #ActiveDirectory
                          $savepath = "$workingdirectory\modules\AdminToolbox.ActiveDirectory"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-ActiveDirectory', 'Get-ADInfo', 'Get-DCLockoutEvents', 'Get-EndpointReport', 'Get-LockedAccounts', 'Get-PasswordExpired', 'Get-ReplicationStatus', 'Get-UserReport', 'Set-Password', 'Start-Replication', 'Unlock-Account', 'Unlock-AllAccounts', 'Get-GroupMemberships', 'Get-GroupMembers', 'Import-ActiveDirectory', 'Get-MailEnabledMembers'
                              Path                 = "$savepath\AdminToolbox.ActiveDirectory.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions for Active Directory"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:ActiveDirectoryGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.ActiveDirectoryManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'Active', 'ActiveDirectory', 'Directory'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($EndpointManagement) {
                          #EndpointManagement
                          $savepath = "$workingdirectory\modules\AdminToolbox.EndpointManagement"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Add-LocalAdmin', 'Disable-Firewall', 'Disable-PasswordPeek', 'Disable-ShakeToMinimize', 'Disable-Standby', 'Dismount-ProfileRegistry', 'Enable-Firewall', 'Enable-RSATFeatures', 'Get-Applications', 'Get-ChocoOutdated', 'Get-IntroPCS', 'Get-Management', 'Get-PCInfo', 'Get-PrintBackup', 'Get-Printers', 'Get-PrintManagement', 'Get-EndpointManagement', 'Install-Chocolatey', 'Install-ChocoPackages', 'Invoke-ChocoUpgrade', 'Invoke-PrinterServerRenew', 'Join-Domain', 'Mount-ProfileRegistry', 'Remove-PrintQueue', 'Remove-Shortcuts', 'Remove-StoreApps', 'Remove-Tiles', 'Restart-Endpoint', 'Get-ChocoInstalls', 'Set-UAC', 'Uninstall-Application', 'Get-PowerShell7', 'Reset-EndpointPassword', 'Repair-DomainJoin', 'Disable-Cortana', 'Get-MonitorSizes', 'Get-RebootEvents', 'Get-RemoteDesktopLogins'
                              Path                 = "$savepath\AdminToolbox.EndpointManagement.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions for management of endpoints"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:EndpointManagementGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" },
                                  @{ ModuleName = "PSEventViewer" ; ModuleVersion = "1.0.17" }
                              )
                              RootModule           = "AdminToolbox.EndpointManagementManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'Chocolatey', 'PC', 'PCSetup', 'Print', 'Printer', 'Setup', 'UAC', 'Windows'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($Exchange) {
                          #Exchange
                          $savepath = "$workingdirectory\modules\AdminToolbox.Exchange"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-Exchange', 'Add-DistributionMember', 'Get-MailLog', 'Get-UserDisabledMailboxes', 'Get-VirtualDirectories', 'Set-VirtualDirectories', 'Get-MailboxScaleReport', 'Get-MailboxAccessOWAOnly', 'Enable-365MailboxExistingUser', 'Connect-ExchangeServer', 'Disconnect-ExchangeServer', 'get-mailboxreport'
                              Path                 = "$savepath\AdminToolbox.Exchange.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions for Exchange Management"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:ExchangeGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.ExchangeManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'Exchange'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($FFTools) {
                          #FFTools
                          $savepath = "$workingdirectory\modules\AdminToolbox.FFTools"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-FFTools', 'Get-Tips', 'Install-FFTools', 'Set-FFToolsVariables', 'Start-BurnSubtitles', 'Start-Remux', 'Start-Transcode', 'Get-Streams', 'Start-TranscodeMap'
                              Path                 = "$savepath\AdminToolbox.FFTools.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Expedite simple ffmpeg actions"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:FFToolsGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.FFToolsManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'FFMpeg', 'Remux', 'Transcode'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($FileManagement) {
                          #FileManagement
                          $savepath = "$workingdirectory\modules\AdminToolbox.FileManagement"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-FileManagement', 'Find-ComputersFiles', 'Get-FileOwner', 'Get-FolderSize', 'Invoke-Robocopy', 'Remove-All', 'Remove-DisabledADProfiles', 'Remove-OlderThan', 'Get-ShareReport', 'Get-FolderName', 'Get-FileName', 'Use-WSLnano', 'Get-EmptyDirectory', 'Get-LastUsedDirectory'
                              Path                 = "$savepath\AdminToolbox.FileManagement.psd1"
                              Author               = "Taylor Lee"
                              Description          = "File Management Functions"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:FileManagementGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.FileManagementManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'File', 'Robocopy'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($FortiWizard) {
                          #FortiWizard
                          $savepath = "$workingdirectory\modules\AdminToolbox.FortiWizard"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Disable-SipALG', 'Enable-Management', 'Enable-PushNotifications', 'Get-FortiWizard', 'New-AddressObject', 'New-AddressGroup', 'Write-SSLVPNConfig', 'New-IPPoolOverload', 'New-IPPoolFixedRange', 'New-VIPHost', 'New-VIPRange', 'New-ServiceObject', 'New-ServiceGroup', 'New-P2PTunnel', 'Show-Docs', 'New-P2PTunnelNAT', 'New-DialUPTunnelRemoteNAT', 'New-DialUPTunnelBehindNAT', 'New-FormTunnel', 'New-LocalInPolicy', 'Add-SSLVPNSAMLUsersMFAEnforced', 'Add-SSLVPNSAMLUsersAzureDefaultSecurity', 'Add-SSLVPNSAMLUsersSelection'
                              Path                 = "$savepath\AdminToolbox.FortiWizard.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions that generate configuration scripts and manage FortiOS."
                              ModuleVersion        = "$script:FortiWizardGithubVersion"
                              Powershellversion    = "5.1"
                              RootModule           = "AdminToolbox.FortiWizardManifest.psm1"
                              ReleaseNotes         = "Full ChangeLog contained in bundled ChangeLog"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              Tags                 = 'Fortinet', 'FortiGate', 'FortiOS'
                              RequiredModules      = (
                                  @{ModuleName = 'AdminToolbox.Networking'; ModuleVersion = $script:NetworkingGithubVersion; },
                                  @{ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" },
                                  @{ModuleName = 'posh-ssh'; ModuleVersion = '2.3.0' }
                              )
                          }

                          New-ModuleManifest @Params
                      }

                      if ($fun) {
                          #Fun
                          $savepath = "$workingdirectory\modules\AdminToolbox.Fun"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-Fun', 'Get-CloseEncounters', 'Get-Excuse', 'Get-ImperialMarch', 'Get-MissionImpossible', 'Get-Mario', 'Get-Tetris', 'Get-Weather', 'Invoke-EjectTray', 'Invoke-Speak', 'Get-Creed', 'Get-Emote'
                              Path                 = "$savepath\AdminToolbox.Fun.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions that have no purpose"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:FunGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.FunManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'Pranks', 'ConsoleMusic'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($Networking) {
                          #Networking
                          $savepath = "$workingdirectory\modules\AdminToolbox.Networking"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-Networking', 'Clear-Arp', 'Get-NetworkStatistics', 'Get-PublicIP', 'Get-MacVendor', 'Invoke-NetworkScan', 'Reset-NetworkAdapter', 'Reset-NetworkStack', 'Invoke-Iperf', 'Start-SpeedTest', 'Get-Whois', 'Invoke-Monitor', 'Show-IPInfo', 'Start-TraceNG', 'Invoke-Ethr', 'Invoke-PSIPcalc', 'Get-NICConfig'
                              Path                 = "$savepath\AdminToolbox.Networking.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Network Troubleshooting Functions"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:NetworkingGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RootModule           = "AdminToolbox.NetworkingManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'iperf', 'ethr', 'Networking', 'NetworkScan'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($MSGraph) {
                          #MSGraph
                          $savepath = "$workingdirectory\modules\AdminToolbox.MSGraph"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-msgMFAStatus', 'Register-msgScopes', 'Get-MSGraph', 'Show-AllMSGFunctions', 'Get-msgDirectoryRoleMembers', 'get-msgguestusers', 'Get-msgSignIns', 'Get-msgAuthenticationRegistration'
                              Path                 = "$savepath\AdminToolbox.MSGraph.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Microsoft Graph interactive API Functions"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:MSGraphGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RootModule           = "AdminToolbox.MSGraphManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'GraphAPI', 'MSGraph', 'MicrosoftGraph'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($Office365) {
                          #Office365
                          $savepath = "$workingdirectory\modules\AdminToolbox.Office365"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-Office365', 'Get-MFAStatus', 'Get-AzureRoleMembers', 'Get-MsolRoleMembers', 'Connect-Office365', 'Convert-MailboxToShared', 'Get-AuthPolicy', 'New-AuthPolicy', 'Set-AuthPolicy', 'Invoke-Sync365', 'Get-GuestUsers', 'Set-PasswordNeverExpire', 'Set-365GroupVisibility', 'Unblock-Quarantine', 'Get-Quarantine', 'Set-Subscription', 'Invoke-PowerState', 'Get-VMDetails', 'Get-TenantDiagrams', 'Invoke-EXOSharedSession', 'Enable-MailboxAccess', 'Clear-TeamsCache', 'Invoke-PerUserMFAEnforced', 'Get-DistributionGroupMembers'
                              Path                 = "$savepath\AdminToolbox.Office365.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions for working with Office365 and Azure modules"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:Office365GithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.Office365Manifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'Office365', 'Office', '365'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($Remoting) {
                          #Remoting
                          $savepath = "$workingdirectory\modules\AdminToolbox.Remoting"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Get-Remoting', 'Connect-OpenSSH', 'Enable-Remoting', 'Install-SSH', 'Invoke-ServiceRecovery', 'Invoke-RWinSta', 'Invoke-QWinSta', 'Remove-TerminalSessions', 'Get-TerminalSessions', 'Invoke-RunAsSSMS', 'Invoke-RunAsNetwork'
                              Path                 = "$savepath\AdminToolbox.Remoting.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions for remote management and access."
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:RemotingGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.RemotingManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'OpenSSH', 'Remoting', 'SSH'
                          }

                          New-ModuleManifest @Params
                      }

                      if ($VMWareAutomate) {
                          #VMWareAutomate
                          $savepath = "$workingdirectory\modules\AdminToolbox.VMWareAutomate"
                          $Params = @{
                              CompatiblePSEditions = "Desktop", "Core"
                              FunctionsToExport    = 'Enable-ToolsAutoUpgrade', 'Get-DRBackup', 'Get-HostMemoryDimms', 'Get-HostSerialNumber', 'Get-ToolsAutoUpgradeState', 'Get-VMTools', 'Get-VMwareAutomate', 'Invoke-HotAdd', 'Invoke-Power', 'Update-PowerCLIConfiguration', 'Update-VMTools', 'Enable-DatastoreRoundRobin', 'Get-VMFolderPaths'
                              Path                 = "$savepath\AdminToolbox.VMWareAutomate.psd1"
                              Author               = "Taylor Lee"
                              Description          = "Functions to Automate Bulk VMWare Tasks"
                              IconUri              = 'https://raw.githubusercontent.com/TheTaylorLee/AdminToolbox/master/images/toolboxShell2.png'
                              LicenseUri           = 'https://github.com/TheTaylorLee/AdminToolbox/blob/master/LICENSE.txt'
                              ModuleVersion        = "$script:VMWareAutomateGithubVersion"
                              Powershellversion    = "5.1"
                              ProjectUri           = 'https://github.com/TheTaylorLee/AdminToolbox/'
                              RequiredModules      = (
                                  @{ ModuleName = "ImportExcel" ; ModuleVersion = "7.0.1" }
                              )
                              RootModule           = "AdminToolbox.VMWareAutomateManifest.psm1"
                              ReleaseNotes         = "Dependency module for the Module AdminToolbox. Full ChangeLog contained in bundled ChangeLog.txt"
                              Tags                 = 'Automate', 'VMware'
                          }

                          New-ModuleManifest @Params
                      }
                  }

                  function Invoke-PublishModules {
                      $ErrorActionPreference = 'Stop'
                      $workingdirectory = (Get-Location).path

                      #ActiveDirectory
                      $ActiveDirectoryPSGallery = (Find-Module "AdminToolbox.ActiveDirectory" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.ActiveDirectory/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $ActiveDirectoryGithub = $step3 | Select-Object -First 1
                      if ([version]$ActiveDirectoryGithub -gt [version]$ActiveDirectoryPSGallery ) {
                          New-Manifest -ActiveDirectory #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.ActiveDirectory" -NuGetApiKey $env:NUGET_KEY
                          $ActiveDirectory = Write-Output "[+] AdminToolbox.ActiveDirectory published to PSGallery"
                      }
                      else {
                          $ActiveDirectory = Write-Output "[-] AdminToolbox.ActiveDirectory not published"
                      }

                      #EndpointManagement
                      $EndpointManagementPSGallery = (Find-Module "AdminToolbox.EndpointManagement" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.EndpointManagement/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $EndpointManagementGithub = $step3 | Select-Object -First 1
                      if ([version]$EndpointManagementGithub -gt [version]$EndpointManagementPSGallery ) {
                          New-Manifest -EndpointManagement #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.EndpointManagement" -NuGetApiKey $env:NUGET_KEY
                          $EndpointManagement = Write-Output "[+] AdminToolbox.EndpointManagement published to PSGallery"
                      }
                      else {
                          $EndpointManagement = Write-Output "[-] AdminToolbox.EndpointManagement not published"
                      }

                      #Exchange
                      $ExchangePSGallery = (Find-Module "AdminToolbox.Exchange" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Exchange/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $ExchangeGithub = $step3 | Select-Object -First 1
                      if ([version]$ExchangeGithub -gt [version]$ExchangePSGallery ) {
                          New-Manifest -Exchange #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.Exchange" -NuGetApiKey $env:NUGET_KEY
                          $Exchange = Write-Output "[+] AdminToolbox.Exchange published to PSGallery"
                      }
                      else {
                          $Exchange = Write-Output "[-] AdminToolbox.Exchange not published"
                      }

                      #FFTools
                      $FFToolsPSGallery = (Find-Module "AdminToolbox.FFTools" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.FFTools/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $FFToolsGithub = $step3 | Select-Object -First 1
                      if ([version]$FFToolsGithub -gt [version]$FFToolsPSGallery ) {
                          New-Manifest -FFTools #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.FFTools" -NuGetApiKey $env:NUGET_KEY
                          $FFTools = Write-Output "[+] AdminToolbox.FFTools published to PSGallery"
                      }
                      else {
                          $FFTools = Write-Output "[-] AdminToolbox.FFTools not published"
                      }

                      #FileManagement
                      $FileManagementPSGallery = (Find-Module "AdminToolbox.FileManagement" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.FileManagement/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $FileManagementGithub = $step3 | Select-Object -First 1
                      if ([version]$FileManagementGithub -gt [version]$FileManagementPSGallery ) {
                          New-Manifest -FileManagement #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.FileManagement" -NuGetApiKey $env:NUGET_KEY
                          $FileManagement = Write-Output "[+] AdminToolbox.FileManagement published to PSGallery"
                      }
                      else {
                          $FileManagement = Write-Output "[-] AdminToolbox.FileManagement not published"
                      }

                      #Fun
                      $FunPSGallery = (Find-Module "AdminToolbox.Fun" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Fun/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $FunGithub = $step3 | Select-Object -First 1
                      if ([version]$FunGithub -gt [version]$FunPSGallery ) {
                          New-Manifest -Fun #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.Fun" -NuGetApiKey $env:NUGET_KEY
                          $Fun = Write-Output "[+] AdminToolbox.Fun published to PSGallery"
                      }
                      else {
                          $Fun = Write-Output "[-] AdminToolbox.Fun not published"
                      }

                      #msgraph
                      $msgraphPSGallery = (Find-Module "AdminToolbox.msgraph" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.MSGraph/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $MSGraphGithub = $step3 | Select-Object -First 1
                      if ([version]$msgraphGithub -gt [version]$msgraphPSGallery ) {
                          New-Manifest -MSGraph #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.MSGraph" -NuGetApiKey $env:NUGET_KEY
                          $MSGraph = Write-Output "[+] AdminToolbox.MSGraph published to PSGallery"
                      }
                      else {
                          $MSGraph = Write-Output "[-] AdminToolbox.MSGraph not published"
                      }

                      #Networking
                      $NetworkingPSGallery = (Find-Module "AdminToolbox.Networking" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Networking/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $NetworkingGithub = $step3 | Select-Object -First 1
                      if ([version]$NetworkingGithub -gt [version]$NetworkingPSGallery ) {
                          New-Manifest -Networking #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.Networking" -NuGetApiKey $env:NUGET_KEY
                          $Networking = Write-Output "[+] AdminToolbox.Networking published to PSGallery"
                      }
                      else {
                          $Networking = Write-Output "[-] AdminToolbox.Networking not published"
                      }

                      #Office365
                      $Office365PSGallery = (Find-Module "AdminToolbox.Office365" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Office365/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $Office365Github = $step3 | Select-Object -First 1
                      if ([version]$Office365Github -gt [version]$Office365PSGallery ) {
                          New-Manifest -Office365 #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.Office365" -NuGetApiKey $env:NUGET_KEY
                          $Office365 = Write-Output "[+] AdminToolbox.Office365 published to PSGallery"
                      }
                      else {
                          $Office365 = Write-Output "[-] AdminToolbox.Office365 not published"
                      }

                      #Remoting
                      $RemotingPSGallery = (Find-Module "AdminToolbox.Remoting" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.Remoting/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $RemotingGithub = $step3 | Select-Object -First 1
                      if ([version]$RemotingGithub -gt [version]$RemotingPSGallery ) {
                          New-Manifest -Remoting #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.Remoting" -NuGetApiKey $env:NUGET_KEY
                          $Remoting = Write-Output "[+] AdminToolbox.Remoting published to PSGallery"
                      }
                      else {
                          $Remoting = Write-Output "[-] AdminToolbox.Remoting not published"
                      }

                      #VMWareAutomate
                      $VMWareAutomatePSGallery = (Find-Module "AdminToolbox.VMWareAutomate" -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox.VMWareAutomate/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $VMWareAutomateGithub = $step3 | Select-Object -First 1
                      if ([version]$VMWareAutomateGithub -gt [version]$VMWareAutomatePSGallery ) {
                          New-Manifest -VMWareAutomate #Generate each modules manifest files
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.VMWareAutomate" -NuGetApiKey $env:NUGET_KEY
                          $VMWareAutomate = Write-Output "[+] AdminToolbox.VMWareAutomate published to PSGallery"
                      }
                      else {
                          $VMWareAutomate = Write-Output "[-] AdminToolbox.VMWareAutomate not published"
                      }

                      #FortiWizard
                      $FortiwizardPSGallery = (Find-Module Admintoolbox.FortiWizard -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/Admintoolbox.FortiWizard/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $FortiWizardGithub = $step3 | Select-Object -First 1
                      if ([version]$FortiwizardGithub -gt [version]$FortiwizardPSGallery ) {
                          New-Manifest -FortiWizard #Generate each modules manifest files
                          Install-Module AdminToolbox.Networking -AllowClobber -Force; Import-Module AdminToolbox.Networking -Force -Global
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox.FortiWizard" -NuGetApiKey $env:NUGET_KEY
                          $FortiWizard = Write-Output "[+] Admintoolbox.FortiWizard published to PSGallery"
                      }
                      else {
                          $FortiWizard = Write-Output "[-] Admintoolbox.FortiWizard not published"
                      }

                      #AdminToolbox
                      $AdminToolboxPSGallery = (Find-Module AdminToolbox -Repository PSGallery).version
                      $step = Get-Content "$workingdirectory/modules/AdminToolbox/ChangeLog.md" | Select-Object -Last 1; $step2 = $step.trimstart('* **'); $step3 = ($step2).split('*'); $AdminToolboxGithub = $step3 | Select-Object -First 1
                      if ([version]$AdminToolboxGithub -gt [version]$AdminToolboxPSGallery ) {
                          New-Manifest -AdminToolbox #Generate each modules manifest files
                          Install-Module AdminToolbox.ActiveDirectory -AllowClobber -Force; Import-Module AdminToolbox.ActiveDirectory -Force -Global
                          Install-Module AdminToolbox.EndpointManagement -AllowClobber -Force; Import-Module AdminToolbox.EndpointManagement -Force -Global
                          Install-Module AdminToolbox.Exchange -AllowClobber -Force; Import-Module AdminToolbox.Exchange -Force -Global
                          Install-Module AdminToolbox.FFTools -AllowClobber -Force; Import-Module AdminToolbox.FFTools -Force -Global
                          Install-Module AdminToolbox.FileManagement -AllowClobber -Force; Import-Module AdminToolbox.FileManagement -Force -Global
                          Install-Module AdminToolbox.FortiWizard -AllowClobber -Force; Import-Module AdminToolbox.FortiWizard -Force -Global
                          Install-Module AdminToolbox.Fun -AllowClobber -Force; Import-Module AdminToolbox.Fun -Force -Global
                          Install-Module AdminToolbox.msgraph -AllowClobber -Force; Import-Module AdminToolbox.Networking -Force -Global
                          Install-Module AdminToolbox.Networking -AllowClobber -Force; Import-Module AdminToolbox.Networking -Force -Global
                          Install-Module AdminToolbox.Office365 -AllowClobber -Force; Import-Module AdminToolbox.Office365 -Force -Global
                          Install-Module AdminToolbox.Remoting -AllowClobber -Force; Import-Module AdminToolbox.Remoting -Force -Global
                          Install-Module AdminToolbox.VMWareAutomate -AllowClobber -Force; Import-Module AdminToolbox.VMWareAutomate -Force -Global
                          Publish-Module -Path "$workingdirectory/modules/AdminToolbox" -NuGetApiKey $env:NUGET_KEY
                          $AdminToolbox = Write-Output "[+] AdminToolbox published to PSGallery"
                      }
                      else {
                          $AdminToolbox = Write-Output "[-] AdminToolbox not published"
                      }

                      $ActiveDirectory
                      $EndpointManagement
                      $Exchange
                      $FFTools
                      $FileManagement
                      $FortiWizard
                      $Fun
                      $MSGraph
                      $Networking
                      $Office365
                      $Remoting
                      $VMWareAutomate
                      $AdminToolbox
                  }

                  Invoke-PublishModules

                  #Publish new manifest files to the repository
                  git config --global user.email $env:GIT_EMAIL
                  git config --global user.name "TheTaylorLee"
                  git add -A
                  git commit -m "rel: Manifest Update"
                  git push -u origin master
